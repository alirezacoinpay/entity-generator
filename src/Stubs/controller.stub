<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Http\Requests\{{ namePlural }}\Add{{ name }}Request;
use App\Http\Requests\{{ namePlural }}\All{{ namePlural }}Request;
use App\Http\Requests\{{ namePlural }}\Update{{ name }}Request;
use App\Http\Resources\{{ name }}Resource;
use App\Repositories\{{ name }}\{{ name }}RepositoryInterface;
use Illuminate\Http\JsonResponse;

class {{ name }}Controller extends Controller
{
    public function __construct(
        protected {{ name }}RepositoryInterface $repository,
    ) {}

    public function show($id): JsonResponse
    {
        ${{ camelName }} = $this->repository->findById($id);

        return ${{ camelName }}
            ? $this->success(new {{ name }}Resource(${{ camelName }}))
            : $this->error('api.not_found.{{ camelName }}', [], 404);
    }

    public function index(All{{ namePlural }}Request $request): JsonResponse
    {
        $validated = $request->validated();
        ${{ camelPlural }} = $this->repository->all($validated);

        return $this->success(${{ camelPlural }});
    }

    public function store(Add{{ name }}Request $request): JsonResponse
    {
        $validated = $request->validated();
        ${{ camelName }} = $this->repository->create($validated);

        return $this->success(new {{ name }}Resource(${{ camelName }}), 'api.created.{{ nameLower }}');
    }

    public function update(Update{{ name }}Request $request, $id): JsonResponse
    {
        $validated = $request->validated();
        ${{ camelName }} = $this->repository->findByIdLight($id);

        if (${{ camelName }}) {
            $this->repository->update($id, $validated);
            ${{ camelName }} = $this->repository->findById($id);

            return $this->success(new {{ name }}Resource(${{ camelName }}), 'api.updated.{{ nameLower }}');
        }

        return $this->error('api.not_found.{{ camelName }}', [], 404);
    }

    public function destroy($id): JsonResponse
    {
        $result = $this->repository->delete($id);

        if ($result) {
            return $this->success($result, 'api.deleted.{{ nameLower }}');
        }

        return $this->error('api.not_found.{{ camelName }}', [], 404);
    }

    public function restore($id): JsonResponse
    {
        $result = $this->repository->restore($id);

        if ($result) {
            ${{ camelName }} = $this->repository->findById($id);
            return $this->success(new {{ name }}Resource(${{ camelName }}), 'api.restored.{{ nameLower }}');
        }

        return $this->error('api.not_found.{{ camelName }}', [], 404);
    }
}
